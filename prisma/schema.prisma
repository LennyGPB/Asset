generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // ou "postgresql" selon ta configuration
  url      = env("DATABASE_URL")
}

model Medias {
  id_media Int      @id @default(autoincrement())
  url      String   @db.VarChar(255)
  assets   Asset[]  @relation("possede")        // Relation avec Asset
}

model Categorie {
  id_categorie Int      @id @default(autoincrement())
  nom          String   @db.VarChar(50)
  assets       Asset[]  @relation("appartient") // Relation avec Asset
  tags         Tags[]    @relation("CategorieTags") // Relation avec Tags
}

model Tags {
  id_tags     Int      @id @default(autoincrement())
  nom         String   @db.VarChar(50)
  assets      AssetTags[] @relation("TagAssets") // Relation avec Asset
  categorieId Int // Champ pour la relation avec Categorie
  categorie   Categorie @relation("CategorieTags", fields: [categorieId], references: [id_categorie]) // Relation avec Categorie
}

model Asset {
  id_asset         Int        @id @default(autoincrement())
  file_url         String?     @db.VarChar(255)
  //file_type        String?     @db.VarChar(50)
  file_size        Decimal?    @db.Decimal(15, 2)
  titre            String     @db.VarChar(50)
  description      String     @db.Text
  prix             Decimal    @db.Decimal(15, 2)
  likes            Int        @default(0)
  nb_dl            Int        @default(0)
  slogan           String?    @db.VarChar(50)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  image_couverture String?    @db.VarChar(255)

  userId           Int?
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  categorieId      Int?
  categorie        Categorie? @relation("appartient", fields: [categorieId], references: [id_categorie])

  medias           Medias[]   @relation("possede")  // Relation avec Medias
  tags             AssetTags[]
  owners           Possession[]
  assetLikes       Likes[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[] 
  sessions      Session[] 
  assets        Asset[]   // Relation pour poster un Asset
  ownedAssets   Possession[]
  likes         Likes[] 
}

model Likes {
  id         Int      @id @default(autoincrement())
  userId     Int      // Clé étrangère vers l'utilisateur
  assetId    Int      // Clé étrangère vers l'asset
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset      Asset    @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)

  @@unique([userId, assetId])  // Empêche les doublons : un utilisateur ne peut liker un asset qu'une fois
}

model AssetTags {
  assetId  Int
  tagId    Int
  asset    Asset @relation(fields: [assetId], references: [id_asset])
  tag      Tags  @relation(fields: [tagId], references: [id_tags], name: "TagAssets") // Ajout du nom de la relation

  @@id([assetId, tagId]) // Clé primaire composée
}

model Possession {
  id            Int    @id @default(autoincrement())
  userId        Int
  assetId       Int

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset         Asset  @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)

  @@unique([userId, assetId])
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model appartient {
//   id_asset     Int
//   id_categorie Int

//   @@id([id_asset, id_categorie])
// }

// model est_lie {
//   id_categorie Int
//   id_tags      Int

//   @@id([id_categorie, id_tags])
// }

// model possede {
//   id_asset Int
//   id_media Int

//   @@id([id_asset, id_media])
// }

