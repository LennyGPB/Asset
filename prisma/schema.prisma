generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medias {
  id_media Int      @id @default(autoincrement())
  url      String
  assets   AssetMedia[] // Relation avec Asset
}

model Categorie {
  id_categorie Int      @id @default(autoincrement())
  nom          String   @db.VarChar(50)
  assets       Asset[]  @relation("appartient") // Relation avec Asset
  tags         Tags[]   @relation("CategorieTags") // Relation avec Tags
}

model Tags {
  id_tags     Int      @id @default(autoincrement())
  nom         String   @db.VarChar(50)
  assets      AssetTags[] @relation("TagAssets") // Relation avec Asset
  categorieId Int // Champ pour la relation avec Categorie
  categorie   Categorie @relation("CategorieTags", fields: [categorieId], references: [id_categorie]) // Relation avec Categorie
}

model Asset {
  id_asset         Int        @id @default(autoincrement())
  file_url         String?
  file_size        Decimal?    @db.Decimal(15, 2)
  titre            String      @db.VarChar(50)
  description      String      @db.Text
  prix             Decimal     @db.Decimal(15, 2)
  likes            Int         @default(0)
  nb_dl            Int         @default(0)
  slogan           String?     @db.VarChar(50)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  image_couverture String?     @db.VarChar(255)

  userId           Int?
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  categorieId      Int?
  categorie        Categorie?  @relation("appartient", fields: [categorieId], references: [id_categorie], onDelete: Cascade)

  medias           AssetMedia[]
  tags             AssetTags[]
  owners           Possession[]
  buyers           Buy[]
  assetLikes       Likes[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  stripeId      String?
  accounts      Account[]
  sessions      Session[]
  assets        Asset[]        // Relation pour poster un Asset
  ownedAssets   Possession[]   // Relation pour les assets possédés
  buyedAssets   Buy[]          // Relation pour les assets achetés
  likes         Likes[]
}

model Likes {
  id         Int      @id @default(autoincrement())
  userId     Int      // Clé étrangère vers l'utilisateur
  assetId    Int      // Clé étrangère vers l'asset
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset      Asset    @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)

  @@unique([userId, assetId]) // Empêche les doublons : un utilisateur ne peut liker un asset qu'une fois
}

model AssetMedia {
  assetId Int
  mediaId Int
  asset   Asset   @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)
  media   Medias  @relation(fields: [mediaId], references: [id_media], onDelete: Cascade)

  @@id([assetId, mediaId])
}

model AssetTags {
  assetId Int
  tagId   Int
  asset   Asset @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)
  tag     Tags  @relation(fields: [tagId], references: [id_tags], name: "TagAssets")

  @@id([assetId, tagId]) // Clé primaire composée
}

model Buy {
  id         Int      @id @default(autoincrement())
  userId     Int
  assetId    Int
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset      Asset    @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)

  @@unique([userId, assetId]) // Empêche les doublons : un utilisateur ne peut acheter un asset qu'une fois
}

model Possession {
  id      Int  @id @default(autoincrement())
  userId  Int
  assetId Int

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset   Asset  @relation(fields: [assetId], references: [id_asset], onDelete: Cascade)

  @@unique([userId, assetId])
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
